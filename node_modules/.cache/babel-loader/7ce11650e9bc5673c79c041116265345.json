{"ast":null,"code":"var _jsxFileName = \"/Users/gustavorevelles/Documents/Proyectos en proceso/Curso React/xplorapp/reactcoderv2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/createContext();\nexport const CartContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [products, setProducts] = useState([]);\n  console.log(products);\n\n  const addItem = (item, quantity) => {\n    const productToAdd = { ...item,\n      quantity\n    };\n    isInCart(item.id) ? updateItemInCart(productToAdd) : addItemToCart(productToAdd);\n  };\n\n  const isInCart = id => {\n    return products.some(prod => prod.id === id);\n  };\n\n  const updateItemInCart = productToAdd => {\n    const updatedCart = products.map(prod => {\n      if (prod.id === productToAdd.id) {\n        const updatedProduct = { ...prod,\n          quantity: prod.quantity + productToAdd.quantity\n        };\n        return updatedProduct;\n      } else {\n        return prod;\n      }\n    });\n    setProducts(updatedCart);\n  };\n\n  const addItemToCart = productToAdd => {\n    setProducts([...products, productToAdd]);\n  };\n\n  const removeItem = id => {\n    const newProducts = products.filter(prod => prod.id !== id);\n    setProducts(newProducts);\n  };\n\n  const clearCart = () => {\n    setProducts([]);\n  };\n\n  const getTotal = () => {\n    let total = 0;\n    products.forEach(prod => {\n      total = total + prod.price * prod.quantity;\n    });\n    return total;\n  };\n\n  const getQuantity = () => {\n    let count = 0;\n    products.forEach(prod => {\n      count = count + prod.quantity;\n    });\n    return count;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      products,\n      addItem,\n      removeItem,\n      clearCart,\n      getTotal,\n      getQuantity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartContextProvider, \"/ZAmBmUKriWz3XDcp0xu079Wyow=\");\n\n_c = CartContextProvider;\nexport default Context;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["/Users/gustavorevelles/Documents/Proyectos en proceso/Curso React/xplorapp/reactcoderv2/src/App.js"],"names":["createContext","useState","Context","CartContextProvider","children","products","setProducts","console","log","addItem","item","quantity","productToAdd","isInCart","id","updateItemInCart","addItemToCart","some","prod","updatedCart","map","updatedProduct","removeItem","newProducts","filter","clearCart","getTotal","total","forEach","price","getQuantity","count"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAEA,MAAMC,OAAO,gBAAGF,aAAa,EAA7B;AAEA,OAAO,MAAMG,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACjD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;;AAEA,QAAMI,OAAO,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAEhC,UAAMC,YAAY,GAAG,EACjB,GAAGF,IADc;AAEjBC,MAAAA;AAFiB,KAArB;AAKAE,IAAAA,QAAQ,CAACH,IAAI,CAACI,EAAN,CAAR,GAAoBC,gBAAgB,CAACH,YAAD,CAApC,GAAqDI,aAAa,CAACJ,YAAD,CAAlE;AACH,GARD;;AAUA,QAAMC,QAAQ,GAAIC,EAAD,IAAQ;AACrB,WAAOT,QAAQ,CAACY,IAAT,CAAcC,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAlC,CAAP;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,YAAD,IAAkB;AACvC,UAAMO,WAAW,GAAGd,QAAQ,CAACe,GAAT,CAAaF,IAAI,IAAI;AACrC,UAAGA,IAAI,CAACJ,EAAL,KAAYF,YAAY,CAACE,EAA5B,EAAgC;AAC5B,cAAMO,cAAc,GAAG,EACnB,GAAGH,IADgB;AAEnBP,UAAAA,QAAQ,EAAEO,IAAI,CAACP,QAAL,GAAgBC,YAAY,CAACD;AAFpB,SAAvB;AAIA,eAAOU,cAAP;AACH,OAND,MAMO;AACH,eAAOH,IAAP;AACH;AACJ,KAVmB,CAApB;AAYAZ,IAAAA,WAAW,CAACa,WAAD,CAAX;AACH,GAdD;;AAgBA,QAAMH,aAAa,GAAIJ,YAAD,IAAkB;AACpCN,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcO,YAAd,CAAD,CAAX;AACH,GAFD;;AAIA,QAAMU,UAAU,GAAIR,EAAD,IAAQ;AACvB,UAAMS,WAAW,GAAGlB,QAAQ,CAACmB,MAAT,CAAgBN,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYA,EAApC,CAApB;AACAR,IAAAA,WAAW,CAACiB,WAAD,CAAX;AACH,GAHD;;AAKA,QAAME,SAAS,GAAG,MAAM;AACpBnB,IAAAA,WAAW,CAAC,EAAD,CAAX;AACH,GAFD;;AAIA,QAAMoB,QAAQ,GAAG,MAAM;AACnB,QAAIC,KAAK,GAAG,CAAZ;AACAtB,IAAAA,QAAQ,CAACuB,OAAT,CAAiBV,IAAI,IAAI;AACrBS,MAAAA,KAAK,GAAGA,KAAK,GAAGT,IAAI,CAACW,KAAL,GAAaX,IAAI,CAACP,QAAlC;AACH,KAFD;AAGA,WAAOgB,KAAP;AACH,GAND;;AAQA,QAAMG,WAAW,GAAG,MAAM;AACtB,QAAIC,KAAK,GAAG,CAAZ;AACA1B,IAAAA,QAAQ,CAACuB,OAAT,CAAiBV,IAAI,IAAI;AACrBa,MAAAA,KAAK,GAAGA,KAAK,GAAGb,IAAI,CAACP,QAArB;AACH,KAFD;AAGA,WAAOoB,KAAP;AACH,GAND;;AAQA,sBACI,QAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AACrB1B,MAAAA,QADqB;AAErBI,MAAAA,OAFqB;AAGrBa,MAAAA,UAHqB;AAIrBG,MAAAA,SAJqB;AAKrBC,MAAAA,QALqB;AAMrBI,MAAAA;AANqB,KAAzB;AAAA,cAQK1B;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA3EM;;GAAMD,mB;;KAAAA,mB;AA6Eb,eAAeD,OAAf","sourcesContent":["import { createContext, useState } from \"react\"\n\nconst Context = createContext()\n\nexport const CartContextProvider = ({ children }) => {\n    const [products, setProducts] = useState([])  \n    console.log(products)\n\n    const addItem = (item, quantity) => {\n\n        const productToAdd = {\n            ...item,\n            quantity\n        } \n\n        isInCart(item.id) ? updateItemInCart(productToAdd) : addItemToCart(productToAdd) \n    }\n\n    const isInCart = (id) => {\n        return products.some(prod => prod.id === id)\n    }\n\n    const updateItemInCart = (productToAdd) => {\n        const updatedCart = products.map(prod => {\n            if(prod.id === productToAdd.id) {\n                const updatedProduct = {\n                    ...prod,\n                    quantity: prod.quantity + productToAdd.quantity\n                }\n                return updatedProduct\n            } else {\n                return prod\n            }\n        })\n\n        setProducts(updatedCart)\n    }\n\n    const addItemToCart = (productToAdd) => {\n        setProducts([...products, productToAdd])\n    }\n\n    const removeItem = (id) => {\n        const newProducts = products.filter(prod => prod.id !== id)\n        setProducts(newProducts)\n    }\n\n    const clearCart = () => {\n        setProducts([])\n    }\n\n    const getTotal = () => {\n        let total = 0\n        products.forEach(prod => {\n            total = total + prod.price * prod.quantity\n        })\n        return total\n    }\n\n    const getQuantity = () => {\n        let count = 0\n        products.forEach(prod => {\n            count = count + prod.quantity\n        })\n        return count\n    }\n\n    return (\n        <Context.Provider value={{\n            products,\n            addItem,\n            removeItem,\n            clearCart,\n            getTotal,\n            getQuantity\n            }}>\n            {children}\n        </Context.Provider>\n    )\n}\n\nexport default Context"]},"metadata":{},"sourceType":"module"}